#!/bin/bash

echo "Running setupdisk..."

[ "$filesystem" == "zfs" ] &&
    { commandFailure="Running zgenhostid has failed." ; zgenhostid -f 0x00bab10c || die ; }

if [ -n "$wipedisk" ] && [ "$wipedisk" -gt 0 ]; then
    shred --verbose --random-source=/dev/urandom -n"$wipedisk" --zero "$diskInput" ||
        { commandFailure="Disk erase has failed." ; die ; }
fi

deviceVG=$(pvdisplay $diskInput* | grep "VG Name" | while read c1 c2; do echo $c2; done | sed 's/Name //g')

if [ -n "$deviceVG" ]; then
    commandFailure="VG destruction has failed."
    vgchange -a n "$deviceVG" || die
    vgremove "$deviceVG" || die
fi

commandFailure="Disk pre-install wipe has failed."
scanpartitions="$diskInput?*" # We only want child partitions, not the parent drive
for i in $scanpartitions
do
    wipefs --all -f "$i" 
done

sfdisk --delete "$diskInput"

# 'echo ;' here is equivalent to pressing enter in fdisk
(
    echo g; # gpt table
    echo n; echo ; echo ; echo +500M; # ESP
    [ "$lvm" == "No" ] && [ "$swapStyle" == "partition" ] && echo n; echo ; echo ; echo +"$swapSize";
    if [ "$filesystem" == "zfs" ] || [ "$filesystem" == "btrfs" ] || [ "$lvm" == "Yes" ] || [ "$rootSize" == "full" ]; then
        echo n; echo ; echo ; echo ;
    fi
    [ "$lvm" == "No" ] && [ "$rootSize" != "full" ] && echo n; echo ; echo ; echo +"$rootSize";
    [ "$lvm" == "No" ] && [ "$encryption" == "No" ] && [ "$homeSize" != "full" ] && echo n; echo ; echo ; echo +"$homeSize";
    [ "$lvm" == "No" ] && [ "$encryption" == "No" ] && [ "$homeSize" == "full" ] && echo n; echo ; echo ; echo ;
    echo w;
) | fdisk -w always "$diskInput" ||
    { commandFailure="Writing partition table to disk has failed." ; die ; }

# if idvar is unset, the following will set partition variables to, for example, sda1 instead of sdap1 (or more appropriately, nvme0n1p1 or likewise)
# if you see this and can think of a less stupid name for this variable, feel free to make a PR
if [[ "$diskInput" == /dev/nvme* ]] || [[ "$diskInput" == /dev/mmcblk* ]]; then
    idvar="p"
fi

esp="$diskInput""$idvar"1

[ "$lvm" == "Yes" ] &&
    root="$diskInput""$idvar"2

[ "$filesystem" == "btrfs" ] &&
    root="$diskInput""$idvar"2

if [ "$lvm" == "No" ] && [ "$swapStyle" == "partition" ]; then
    root="$diskInput""$idvar"3
else
    root="$diskInput""$idvar"2
fi

[ "$lvm" == "No" ] && [ "$swapStyle" == "partition" ] &&
    swap="$diskInput""$idvar"2

[ "$lvm" == "No" ] && [ -n "$homeSize" ] && [ "$encryption" == "No" ] && [ -n "$swap" ] &&
    home="$diskInput""$idvar"4

[ "$lvm" == "No" ] && [ -n "$homeSize" ] && [ "$encryption" == "No" ] && [ -z "$swap" ] &&
    home="$diskInput""$idvar"3

mkfs.vfat "$esp" ||
    { commandFailure="Formatting ESP as vfat has failed." ; die ; }

if [ "$encryption" == "Yes" ] && [ "$filesystem" != "zfs" ]; then

    [ -z "$hash" ] &&
        hash="sha512"

    [ -z "$keysize" ] &&
        keysize="512"

    [ -z "$itertime" ] &&
        itertime="10000"

    clear
    echo -e "${YELLOW}Enter your encryption passphrase here.${NC}"
    commandFailure="Encrypting partition has failed."
    case "$bootloader" in
        grub)
            while : ; do
                cryptsetup luksFormat --type luks1 --batch-mode --verify-passphrase --hash "$hash" --key-size "$keysize" --iter-time "$itertime" --pbkdf pbkdf2 --use-urandom "$root"
                [ "$?" -eq 0 ] && break
            done
        ;;
        *)
            while : ; do
                cryptsetup luksFormat --type luks2 --batch-mode --verify-passphrase --hash "$hash" --key-size "$keysize" --iter-time "$itertime" --pbkdf argon2id --use-urandom "$root"
                [ "$?" -eq 0 ] && break
            done
        ;;
    esac

    echo -e "${YELLOW}Opening new encrypted partition...${NC}"
    while : ; do
        cryptsetup luksOpen "$root" void
        [ "$?" -eq 0 ] && break
    done

    if [ "$lvm" == "Yes" ]; then
        vgcreate void /dev/mapper/void ||
            { commandFailure="Creating volume group has failed." ; die ; }
    fi

else
    if [ "$lvm" == "Yes" ]; then
        commandFailure="Creating volume group has failed."
        pvcreate "$root" || die
        vgcreate void "$root" || die
    fi
fi

if [ "$filesystem" == "btrfs" ]; then
    case "$encryption" in
        Yes)
            mkfs.btrfs -L Void /dev/mapper/void || die
            mount -o "$btrfsopts" /dev/mapper/void /mnt || die
        ;;
        No)
            mkfs.btrfs -L Void "$root" || die
            mount -o "$btrfsopts" "$root" /mnt || die
        ;;
    esac

    btrfs su cr /mnt/@ || die

    [ "$createHome" == "Yes" ] &&
        { btrfs su cr /mnt/@home || die ; }

    btrfs su cr /mnt/@snapshots || die

    [ "$swapStyle" == "swapfile" ] &&
        { btrfs su cr /mnt/@swap || die ; }

    btrfs su cr /mnt/@var || die

    umount /mnt || die
elif [ "$filesystem" == "zfs" ]; then
    commandFailure="Creating zpool has failed."

    if [ "$encryption" == "Yes" ] ; then

        # calculate iteration count based on amount of time the
        # user is willing to wait for decryption, zfs does not
        # have a built in way to do this (one of its many many MANY drawbacks)
        # so attempt to ballpark calculate iterations here.
        clear
        echo "Benchmarking system for pbkdf2..."

        # there is run to run variance with this, so we run it 5 times
        # to average the results of the runs
        for i in {1..5} ; do
            benchmark=$(cryptsetup benchmark --hash sha256)
            benchmark=$(echo $benchmark | awk '{print $12}') # potentially fragile, TODO

            # this desperately needs testing on a good amount of systems,
            # but it's better to overshoot compared to undershoot;
            # on my system this has about half a second of overshoot, meaning 10 seconds
            # will calculate to around 10.5 seconds, and 20 to 21 seconds.
            benchmark=$(echo "$benchmark / 1.375" | bc)
            runs+=("$benchmark")
        done

        # average the results of the benchmarks
        benchmark="$(echo "${runs[0]} + ${runs[1]} + ${runs[2]} + ${runs[3]} + ${runs[4]}" | bc)"
        benchmark="$(echo "$benchmark / 5" | bc)"
        echo "Set $benchmark iterations per second for pbkdf2iters."

        # out of desire to keep the same declaration of iteration time style as luks,
        # we need to do some basic math here
        [ -z "$itertime" ] &&
            itertime="10000" # same 10 second default as with luks

        # TODO: this assumes the user is setting itertime to a number divisible by 1000
        iterationSeconds=$(echo "$itertime / 1000" | bc)
        zfsIters=$(echo "$iterationSeconds * $benchmark" | bc)

        while [ -z "$zfscryptpass" ] ; do
            echo -e "${YELLOW}Enter your encryption passphrase here: (Minimum 8 characters)${NC}"
            read -s zfscryptpass

            echo -e "${YELLOW}Enter your encryption passphrase again to confirm:${NC}"
            read -s zfscryptpassconfirm

            if [ "${#zfscryptpass}" -lt 8 ]; then
                echo -e "${RED}Passphrase must be at least 8 characters in length.${NC}"
                unset zfscryptpass zfscryptpassconfirm
            fi

            if [ "$zfscryptpass" != "$zfscryptpassconfirm" ] ; then
                echo -e "${RED}Passphrases do not match. Try again.${NC}"
                unset zfscryptpass zfscryptpassconfirm
            fi
        done

        echo "$zfscryptpass" > /etc/zfs/zroot.key
        chmod 000 /etc/zfs/zroot.key

        # best to explicitly discard these
        unset zfscryptpass zfscryptpassconfirm

        echo "Creating encrypted zpool..."
    fi

    # https://docs.zfsbootmenu.org/en/v3.0.x/guides/void-linux/uefi.html#create-the-zpool
    partVar=$(blkid -o value -s PARTUUID "$root")
    if [ "$encryption" == "Yes" ]; then
        zpool create -f -o ashift=12 \
            -O compression="$compressionType" \
            -O acltype=posixacl \
            -O xattr=sa \
            -O relatime=on \
            -O encryption=aes-256-gcm \
            -O keylocation=file:///etc/zfs/zroot.key \
            -O keyformat=passphrase \
            -O pbkdf2iters="$zfsIters" \
            -o autotrim=on \
            -o compatibility=openzfs-2.1-linux \
            -m none zroot /dev/disk/by-partuuid/"$partVar"
    else
        zpool create -f -o ashift=12 \
            -O compression="$compressionType" \
            -O acltype=posixacl \
            -O xattr=sa \
            -O relatime=on \
            -o autotrim=on \
            -o compatibility=openzfs-2.1-linux \
            -m none zroot /dev/disk/by-partuuid/"$partVar"
    fi

    echo -e "${YELLOW}Enter your encryption passphrase to unlock zroot:${NC}"

    commandFailure="Creating ZFS filesystems has failed."
    zfs create -o mountpoint=none zroot/ROOT || die
    zfs create -o mountpoint=/ -o canmount=noauto zroot/ROOT/void || die

    [ "$createHome" == "Yes" ] &&
        { zfs create -o mountpoint=/home zroot/home || die ; }

    commandFailure="Re-importing zpool has failed."
    zpool export zroot || die
    zpool import -N -R /mnt zroot || die

    [ "$encryption" == "Yes" ] &&
        { zfs load-key -L prompt zroot || die ; }

    zfs mount zroot/ROOT/void || die
    zfs mount -a || die

    # Cache file, see https://docs.voidlinux.org/installation/guides/zfs.html
    commandFailure="Creating ZFS pool cache file has failed."
    mkdir -p /mnt/etc/zfs || die
    zpool set cachefile=/mnt/etc/zfs/zpool.cache zroot || die

    udevadm trigger || die
fi

if [ "$swapStyle" == "partition" ]; then
    commandFailure="Creating swap partition has failed."
    if [ "$lvm" == "Yes" ]; then
        lvcreate --name swap -L "$swapSize" void || die
        mkswap /dev/void/swap || die
    else
        mkswap "$swap" || die
    fi
fi

if [ "$rootSize" == "full" ] && [ "$lvm" == "Yes" ]; then
    lvcreate --name root -l 100%FREE void ||
        { commandFailure="Creating root LV has failed." ; die ; }
elif [ "$rootSize" != "full" ] && [ "$lvm" == "Yes" ]; then
    lvcreate --name root -L "$rootSize" void ||
        { commandFailure="Creating root LV has failed." ; die ; }
fi

[ "$lvm" == "Yes" ] &&
    case "$filesystem" in
        xfs) mkfs.xfs /dev/void/root || die ;;
        ext4) mkfs.ext4 /dev/void/root || die ;;
    esac

if [ "$lvm" == "No" ] && [ "$encryption" == "Yes" ]; then
    case "$filesystem" in
        xfs) mkfs.xfs /dev/mapper/void || die ;;
        ext4) mkfs.ext4 /dev/mapper/void || die ;;
    esac
elif [ "$lvm" == "No" ] && [ "$encryption" == "No" ]; then
    case "$filesystem" in
        xfs) mkfs.xfs "$root" || die ;;
        ext4) mkfs.ext4 "$root" || die ;;
    esac
fi

if [ -n "$homeSize" ] && [ "$lvm" == "Yes" ]; then
    commandFailure="Creating home LV has failed."
    if [ -n "$homeSize" ]; then
        if [ "$homeSize" == "full" ]; then
            lvcreate --name home -l 100%FREE void || die
        else
            lvcreate --name home -L "$homeSize" void || die
        fi

        case "$filesystem" in
            xfs) mkfs.xfs /dev/void/home || die ;;
            ext4) mkfs.ext4 /dev/void/home || die ;;
        esac
    fi
elif [ -n "$home" ] && [ "$lvm" == "No" ]; then
    commandFailure="Formatting home partition has failed."
    case "$filesystem" in
        xfs) mkfs.xfs "$home" || die ;;
        ext4) mkfs.ext4 "$home" || die ;;
    esac
fi

commandFailure="Mounting partitions has failed."
[ "$lvm" == "Yes" ] &&
    { mount /dev/void/root /mnt || die ; }

[ "$lvm" == "No" ] && [ "$encryption" == "Yes" ] && [ "$filesystem" != "zfs" ] &&
    { mount /dev/mapper/void /mnt || die ; }

[ "$lvm" == "No" ] && [ "$encryption" == "No" ] && [ "$filesystem" != "zfs" ] &&
    { mount "$root" /mnt || die ; }

[ "$lvm" == "No" ] && [ -n "$home" ] && [ "$filesystem" != "btrfs" ] && [ "$filesystem" != "zfs" ] &&
    { mkdir /mnt/home ; mount "$home" /mnt/home || die ; }

[ "$lvm" == "Yes" ] && [ -e "/dev/mapper/void-home" ] &&
    { mkdir /mnt/home ; mount /dev/mapper/void-home /mnt/home || die ; }

if [ "$filesystem" == "btrfs" ]; then
    case "$encryption" in
        Yes)
            mount -o "$btrfsopts",subvol=@ /dev/mapper/void /mnt || die

            mkdir /mnt/.snapshots || die

            [ "$createHome" == "Yes" ] &&
                { mkdir /mnt/home ; mount -o "$btrfsopts",subvol=@home /dev/mapper/void /mnt/home || die ; }

            mount -o "$btrfsopts",subvol=@snapshots /dev/mapper/void /mnt/.snapshots || die

            [ "$swapStyle" == "swapfile" ] &&
                { mkdir /mnt/swap ; mount -o rw,nodatacow,compress=none,subvol=@swap /dev/mapper/void /mnt/swap || die ; }

            mkdir -p /mnt/var ; mount -o "$btrfsopts",nodatacow,subvol=@var /dev/mapper/void /mnt/var || die
        ;;
        No)
            mount -o "$btrfsopts",subvol=@ "$root" /mnt || die

            mkdir /mnt/.snapshots || die

            [ "$createHome" == "Yes" ] &&
                { mkdir /mnt/home ; mount -o "$btrfsopts",subvol=@home "$root" /mnt/home || die ; }

            mount -o "$btrfsopts",subvol=@snapshots "$root" /mnt/.snapshots || die

            [ "$swapStyle" == "swapfile" ] &&
                { mkdir /mnt/swap ; mount -o rw,nodatacow,compress=none,subvol=@swap "$root" /mnt/swap || die ; }

            mkdir -p /mnt/var ; mount -o "$btrfsopts",nodatacow,subvol=@var "$root" /mnt/var || die
        ;;
    esac

    for i in root tmp srv ;
    do
        btrfs su cr /mnt/"$i" ||
            { commandFailure="Spawning btrfs subvol /mnt/$i has failed." ; die ; }
    done

    mkdir /mnt/usr || die
    btrfs su cr /mnt/usr/local || die

    [ "$bootloader" == "grub" ] &&
        { mkdir -p /mnt/boot/grub ; btrfs su cr /mnt/boot/grub/x86_64-efi || die ; }
fi

# TODO: xchroot can deal with mounting these.
for dir in dev proc sys run; do mkdir -p /mnt/$dir ; mount --rbind /$dir /mnt/$dir ; mount --make-rslave /mnt/$dir ; done || die

mkdir -p /mnt/boot/efi || die
mount "$esp" /mnt/boot/efi || die

return 0
