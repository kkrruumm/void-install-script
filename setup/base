#!/bin/bash

commandFailure="Copying XBPS keys has failed."
mkdir -p /mnt/var/db/xbps/keys || die
cp /var/db/xbps/keys/* /mnt/var/db/xbps/keys || die

commandFailure="Base system installation has failed."

case "$basesystem" in
    base-system)
        XBPS_ARCH=$ARCH install base-system

        [ "$lvm" == "Yes" ] &&
            install lvm2

        # Forcing zfs native crypt for the time being.
        [ "$filesystem" != "zfs" ] &&
            { [ "$encryption" == "Yes" ] && install cryptsetup ; }

        if [ "$kernel" != "linux" ] ; then
            echo "ignorepkg=linux" >> /mnt/etc/xbps.d/ignore.conf || die
            install "$kernel"
            xbps-remove -ROoy -r /mnt linux || die
        fi

        if [ "$su" != "sudo" ]; then
            echo "ignorepkg=sudo" >> /mnt/etc/xbps.d/ignore.conf || die
            xbps-remove -ROoy -r /mnt sudo || die
        fi

        if [ "$initrd" != "dracut" ]; then
            echo "ignorepkg=dracut" >> /mnt/etc/xbps.d/ignore.conf || die
            xbps-remove -ROoy -r /mnt dracut || die

            install "$initrd"
        else
            install binutils # allow dracut to strip the initramfs
        fi

        [ "$su" == "doas" ] &&
            install opendoas

        if [[ ! ${modules[@]} =~ "wifi-firmware" ]]; then
            echo "ignorepkg=wifi-firmware" >> /mnt/etc/xbps.d/ignore.conf || die
            echo "ignorepkg=iw" >> /mnt/etc/xbps.d/ignore.conf || die
            echo "ignorepkg=wpa_supplicant" >> /mnt/etc/xbps.d/ignore.conf || die

            xbps-remove -ROoy -r /mnt wifi-firmware iw wpa_supplicant || die
        fi
    ;;
    *)
        XBPS_ARCH=$ARCH install $basesystem

        install "$kernel"

        [ "$filesystem" != "zfs" ] &&
            { [ "$encryption" == "Yes" ] && install cryptsetup ; }

        [ "$lvm" == "Yes" ] &&
            install lvm2

        case "$su" in
            sudo) install sudo ;;
            doas) install opendoas ;;
        esac

        install "$initrd"

        [ "$initrd" == "dracut" ] &&
            install binutils # allow dracut to strip the initramfs

        install dosfstools

        # zfsbootmenu will automatically pull in zfs
        case "$filesystem" in
            xfs) install xfsprogs ;;
            ext4) install e2fsprogs ;;
            btrfs) install btrfs-progs ;;
        esac
    ;;
esac

[ -n "$bootloader" ] && [ "$bootloader" != "none" ] &&
    commandFailure="Bootloader package installation has failed"

case "$bootloader" in
    uki) install efibootmgr ukify systemd-boot-efistub ;;
    grub) install grub-x86_64-efi ;;
    zfsbootmenu) install zfsbootmenu systemd-boot-efistub efibootmgr ;;
esac

if [ "$bootloader" == "zfsbootmenu" ]; then
    commandFailure="Copying hostid to the new install has failed."
    cp /etc/hostid /mnt/etc || die

    [ "$encryption" == "Yes" ] &&
        { commandFailure="Copying zroot key to the new install has failed." ; cp /etc/zfs/zroot.key /mnt/etc/zfs || die ; }
fi

commandFailure="Creating $kernel virtualpkg has failed."
case "$kernel" in
    linux-lts) echo "virtualpkg=linux-headers:linux-lts-headers" >> /mnt/etc/xbps.d/headers.conf || die ;;
    linux-mainline) echo "virtualpkg=linux-headers:linux-mainline-headers" >> /mnt/etc/xbps.d/headers.conf || die ;;
esac

if [ "$repository" != "https://repo-default.voidlinux.org/current" ] && [ "$repository" != "https://repo-default.voidlinux.org/current/musl" ]; then
    xmirror -s "$repository" -r /mnt ||
        { commandFailure="Repository configuration has failed." ; die ; }
fi

commandFailure="Confuring fstab has failed."
partVar=$(blkid -o value -s UUID "$esp")
echo "UUID=$partVar /boot/efi vfat defaults 0 0" >> /mnt/etc/fstab || die

[ "$lvm" == "Yes" ] &&
    { echo "/dev/void/root / $filesystem defaults 0 0" >> /mnt/etc/fstab || die ; }

[ "$lvm" == "No" ] && [ "$encryption" == "Yes" ] && [ "$filesystem" != "btrfs" ] && [ "$filesystem" != "zfs" ] &&
    { partVar=$(blkid -o value -s UUID /dev/mapper/void) ; echo "UUID=$partVar / $filesystem defaults 0 0" >> /mnt/etc/fstab || die ; }

if [ "$filesystem" == "btrfs" ]; then
    case "$encryption" in
        Yes)
            partVar=$(blkid -o value -s UUID /dev/mapper/void)
            echo "UUID=$partVar / $filesystem $btrfsopts,subvol=@ 0 1" >> /mnt/etc/fstab || die

            [ "$createHome" == "Yes" ] &&
                { echo "UUID=$partVar /home $filesystem $btrfsopts,subvol=@home 0 2" >> /mnt/etc/fstab || die ; }

            echo "UUID=$partVar /.snapshots $filesystem $btrfsopts,subvol=@snapshots 0 2" >> /mnt/etc/fstab || die

            [ -n "$swapSize" ] && [ "$swapStyle" == "swapfile" ] &&
                { echo "UUID=$partVar /swap $filesystem rw,nodatacow,compress=none,subvol=@swap 0 0" >> /mnt/etc/fstab || die ; }

            echo "UUID=$partVar /var $filesystem $btrfsopts,nodatacow,subvol=@var 0 2" >> /mnt/etc/fstab || die
        ;;
        No)
            partVar=$(blkid -o value -s UUID "$root")
            echo "UUID=$partVar / $filesystem $btrfsopts,subvol=@ 0 1" >> /mnt/etc/fstab || die

            [ "$createHome" == "Yes" ] &&
                { echo "UUID=$partVar /home $filesystem $btrfsopts,subvol=@home 0 2" >> /mnt/etc/fstab || die ; }

            echo "UUID=$partVar /.snapshots $filesystem $btrfsopts,subvol=@snapshots 0 2" >> /mnt/etc/fstab || die

            [ -n "$swapSize" ] && [ "$swapStyle" == "swapfile" ] &&
                { echo "UUID=$partVar /swap $filesystem rw,nodatacow,compress=none,subvol=@swap 0 0" >> /mnt/etc/fstab || die ; }

            echo "UUID=$partVar /var $filesystem $btrfsopts,nodatacow,subvol=@var 0 2" >> /mnt/etc/fstab || die
        ;;
    esac
fi

[ "$lvm" == "No" ] && [ "$encryption" == "No" ] && [ "$filesystem" != "btrfs" ] && [ "$filesystem" != "zfs" ] &&
    { partVar=$(blkid -o value -s UUID "$root") ; echo "UUID=$partVar / $filesystem defaults 0 0" >> /mnt/etc/fstab || die ; }

[ -n "$swapSize" ] && [ "$swapStyle" == "partition" ] && [ "$lvm" == "Yes" ] &&
    { echo "/dev/void/swap swap swap defaults 0 0" >> /mnt/etc/fstab || die ; }

[ -n "$swapSize" ] && [ "$swapStyle" == "partition" ] && [ "$lvm" == "No" ] && [ "$filesystem" != "zfs" ] &&
    { partVar=$(blkid -o value -s UUID "$swap") ; echo "UUID=$partVar swap swap defaults 0 0" >> /mnt/etc/fstab || die ; }

[ -n "$swapSize" ] && [ "$swapStyle" == "swapfile" ] && [ "$filesystem" != "btrfs" ] &&
    { echo "/var/swapfile swap swap defaults 0 0" >> /mnt/etc/fstab || die ; }

[ -n "$swapSize" ] && [ "$swapStyle" == "swapfile" ] && [ "$filesystem" == "btrfs" ] &&
    { echo "/swap/swapfile none swap defaults 0 0" >> /mnt/etc/fstab || die ; }

[ "$separateHomePossible" != "No" ] && [ -n "$homeSize" ] && [ "$lvm" == "Yes" ] &&
    { echo "/dev/void/home /home $filesystem defaults 0 0" >> /mnt/etc/fstab || die ; }

[ -n "$homeSize" ] && [ "$lvm" == "No" ] && [ "$filesystem" != "zfs" ] &&
    { partVar=$(blkid -o value -s UUID "$home") ; echo "UUID=$partVar /home $filesystem defaults 0 0" >> /mnt/etc/fstab || die ; }

if [ "$initrd" == "dracut" ]; then
    case "$bootloader" in
        uki)
            commandFailure="Configuring ukify kernel hook has failed."
            cp "$(pwd)/misc/60-ukify" /mnt/etc/kernel.d/post-install/60-ukify || die
            chmod 744 /mnt/etc/kernel.d/post-install/60-ukify || die

            commandFailure="Configuring uki base kernel parameters has failed."
            partVar=$(blkid -o value -s UUID "$root")
            [ "$lvm" == "Yes" ] && [ "$encryption" == "Yes" ] &&
                setKernelParam "rd.luks.uuid=$partVar root=/dev/void/root rootfstype=$filesystem rw"

            [ "$lvm" == "Yes" ] && [ "$encryption" == "No" ] &&
                setKernelParam "rd.lvm.vg=void root=/dev/void/root rootfstype=$filesystem rw"

            if [ "$lvm" == "No" ] && [ "$encryption" == "No" ]; then
                setKernelParam "root=UUID=$partVar rootfstype=$filesystem rw"
            elif [ "$lvm" == "No" ] && [ "$encryption" == "Yes" ]; then
                setKernelParam "rd.luks.uuid=$partVar rd.luks.name=$partVar=void-root root=/dev/mapper/void-root rootfstype=$filesystem rw"
            fi

            [ "$filesystem" == "btrfs" ] &&
                setKernelParam "rootflags=subvol=@"
            ;;
        grub)
            commandFailure="Configuring grub base config has failed."
            if [ "$encryption" == "Yes" ]; then
                partVar=$(blkid -o value -s UUID "$root")
                [ "$lvm" == "Yes" ] &&
                    setKernelParam "rd.lvm.vg=void rd.luks.uuid=$partVar"

                [ "$lvm" == "No" ] &&
                    setKernelParam "rd.luks.uuid=$partVar"

                echo "GRUB_ENABLE_CRYPTODISK=y" >> /mnt/etc/default/grub || die
            fi
            ;;
        zfsbootmenu)
            commandFailure="Configuring zfsbootmenu has failed."
            zfs set org.zfsbootmenu:commandline="loglevel=4" zroot/ROOT || die
            [ "$encryption" == "Yes" ] &&
                { zfs set org.zfsbootmenu:keysource="zroot/ROOT/void" zroot || die ; }

            commandFailure="Configuring dracut for ZFS has failed."
            cp "misc/zol.conf" /mnt/etc/dracut.conf.d/zol.conf || die

            [ "$encryption" == "Yes" ] &&
                { echo 'install_items+=" /etc/zfs/zroot.key "' >> /mnt/etc/dracut.conf.d/zol.conf || die ; }

            commandFailure="Copying zbm config to new system has failed."
            cp "misc/zbmconfig.yaml" /mnt/etc/zfsbootmenu/config.yaml || die
            ;;
    esac

    [ "$initrdhostonly" == "true" ] &&
        { echo 'hostonly="yes"' >> /mnt/etc/dracut.conf || die ; }

elif [ "$initrd" == "tinyramfs" ]; then
    case "$bootloader" in
        uki)
            commandFailure="Configuring ukify kernel hook has failed."
            cp "$(pwd)/misc/60-ukify" /mnt/etc/kernel.d/post-install/60-ukify || die
            chmod 744 /mnt/etc/kernel.d/post-install/60-ukify || die
        ;;
        grub)
            commandFailure="Configuring grub base config has failed."
            echo "GRUB_ENABLE_CRYPTODISK=y" >> /mnt/etc/default/grub || die
        ;;
    esac

    # making an exception to the "style" of this script given how
    # spammed this path is here
    trfsconfig="/mnt/etc/tinyramfs/config"

    commandFailure="Editing tinyramfs config has failed."
    partVar=$(blkid -o value -s UUID "$root")
    sed -i '/root=/d' "$trfsconfig" || die
    if [ "$encryption" == "Yes" ]; then
        echo 'luks_name=void' >> "$trfsconfig" || die
        sed -i 's/hooks="eudev"/hooks="eudev,luks"/g' "$trfsconfig" || die
        echo "luks_root=UUID=${partVar}" >> "$trfsconfig" || die
        partVar=$(blkid -o value -s UUID /dev/mapper/void)

        # the order hooks are included in is also the order they will be executed in,
        # lvm must come *after* luks so tinyramfs will unlock before
        # attempting to activate the "void" volume group
        [ "$lvm" == "Yes" ] &&
            { sed -i 's/hooks="eudev,luks"/hooks="eudev,luks,lvm"/g' "$trfsconfig" || die ; }

        # eliminate the need to enter passphrase twice
        # once /boot has been decrypted
        [ "$bootloader" == "grub" ] &&
            { echo 'luks_key=/boot/volume.key' >> "$trfsconfig" || die ; }
    else
        [ "$lvm" == "Yes" ] &&
            { sed -i 's/hooks="eudev"/hooks="eudev,lvm"/g' "$trfsconfig" || die ; }
    fi

    if [ "$lvm" == "Yes" ]; then
        echo 'root=/dev/void/root' >> "$trfsconfig" || die
    else
        echo "root=UUID=${partVar}" >> "$trfsconfig" || die
    fi

    [ "$filesystem" == "btrfs" ] &&
        { echo 'root_opts="'$btrfsopts',subvol=@"' >> "$trfsconfig" ; }

    [ "$filesystem" != "ext4" ] &&
        { sed -i "s/root_type=ext4/root_type=${filesystem}/g" "$trfsconfig" || die ; }

    [ "$initrdhostonly" == "true" ] &&
        { echo 'hostonly=true' >> "$trfsconfig" || die ; }

    unset trfsconfig
fi

[ "$acpi" == "false" ] &&
    { commandFailure="Disabling acpi has failed." ; setKernelParam "acpi=off" ; }

[ "$intel_pstate" == "false" ] &&
    { commandFailure="Disabling intel_pstate has failed." ; setKernelParam "intel_pstate=disable" ; }

if [ "$libc" == "glibc" ]; then
    commandFailure="Locale configuration has failed."
    echo "$locale" > /mnt/etc/locale.conf || die
    echo "$libclocale" >> /mnt/etc/default/libc-locales || die
fi

echo "$hostname" > /mnt/etc/hostname ||
    { commandFailure="Hostname configuration has failed." ; die ; }

# Configure non-partition methods of swapping
# I feel like this isn't really the place for this-
# but neither is setup-disk or otherwise really, so:
case "$swapStyle" in
    zram)
        commandFailure="Configuring zram has failed."
        echo "zram" >> /mnt/etc/modules-load.d/zram.conf || die
        echo "zramctl /dev/zram0 --algorithm lz4 --size $swapSize" >> /mnt/etc/rc.local || die
        echo "mkswap -U clear /dev/zram0" >> /mnt/etc/rc.local || die
        echo "swapon --discard --priority 100 /dev/zram0" >> /mnt/etc/rc.local || die
    ;;
    swapfile)
        if [ "$filesystem" != "btrfs" ]; then
            commandFailure="Configuring swapfile has failed."
            swapSize=$(echo "$swapSize" | sed 's/G//g')
            echo "Creating swapfile..."
            dd if=/dev/zero of=/mnt/var/swapfile bs=1024M count="$swapSize" status=progress || die
            chmod 600 /mnt/var/swapfile || die # root only.
            mkswap /mnt/var/swapfile || die
        else
            btrfs filesystem mkswapfile --size "$swapSize" --uuid clear /mnt/swap/swapfile || die
            swapon /mnt/swap/swapfile || die
        fi
    ;;
esac

return 0
